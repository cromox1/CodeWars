MORSE_CODE = {'..-.': 'F',
              '-..-': 'X',
              '...---...': 'SOS',
              '-.-.--': '!',
              '.--.': 'P',
              '-': 'T',
              '..---': '2',
              '.-.-.-': '.',
              '....-': '4',
              '-----': '0',
              '--...': '7',
              '...-': 'V',
              '-.-.': 'C',
              '.': 'E',
              '.---': 'J',
              '---': 'O',
              '-.-': 'K',
              '----.': '9',
              '..': 'I',
              '.-..': 'L',
              '.....': '5',
              '...--': '3',
              '-.--': 'Y',
              '-....': '6',
              '.--': 'W',
              '....': 'H',
              '-.': 'N',
              '.-.': 'R',
              '-...': 'B',
              '---..': '8',
              '--..': 'Z',
              '-..': 'D',
              '--.-': 'Q',
              '--.': 'G',
              '--': 'M',
              '..-': 'U',
              '.-': 'A',
              '...': 'S',
              '.----': '1'}

CODE_MORSE = {v:k for k,v in MORSE_CODE.items()}

####### MY CODE / SOLUTIONS

def decode_bits(bits):
    print(bits)
    bits = bits.strip('0')
    print(bits)
    if len(bits) > 1:
        onezero = [i + 1 for i in range(len(bits) - 1) if bits[i] + bits[i + 1] == '10']
        zeroone = [i + 1 for i in range(len(bits) - 1) if bits[i] + bits[i + 1] == '01']
        if onezero != []:
            print('onezero = ', onezero)
            print('zeroone = ', zeroone)
            onezero_org = onezero + [len(bits)]
            zeroone_org = [0] + zeroone
            oneloccount = {zeroone_org[i]: onezero_org[i] - zeroone_org[i] for i in range(len(zeroone_org))}
            zeroloccount = {onezero[i]: zeroone[i] - onezero[i] for i in range(len(onezero))}
            print('oneloccount = ', oneloccount)
            print('zeroloccount = ', zeroloccount)
            divideone = sorted(oneloccount.values())[-1] / 2
            dividezero = sorted(zeroloccount.values())[-1] / 3
            dots = ''
            for i in range(len(bits)):
                if i in oneloccount.keys():
                    if oneloccount[i] > divideone and oneloccount[i] >= 3:
                        dots = dots + '-'
                    else:
                        dots = dots + '.'
                elif i in zeroloccount.keys():
                    if zeroloccount[i] > 2 * dividezero and zeroloccount[i] >= 3:
                        dots = dots + '  '
                    elif dividezero < zeroloccount[i] <= 2 * dividezero:
                        dots = dots + ' '
                    else:
                        dots = dots + ''
            return dots
        else:
            return '.'
    elif len(bits) == 1 and bits == '':
        return ''
    else:
        return bits.replace('1', '.').replace('0', '')

def decode_morse(morse_code):
    if morse_code != ' ' and morse_code != '':
        morse_code = morse_code.strip()
        text = ''
        for x in morse_code.split(' '):
            if x != '':
                text = text + MORSE_CODE[x]
            else:
                text = text + ' '
        return text.replace('  ', ' ')
    else:
        return ''

def encode_morse(sentences):
    sentences = sentences.strip()
    bits = ''
    for word in sentences.split(' '):
        for char in word:
            bits = bits + CODE_MORSE[char.upper()]
            bits = bits + ' '
        bits = bits + ' '
    return bits

########### TDD

class Test:
    def assert_equals(value, expected):
        from nose.tools import assert_equal
        try:
            assert_equal(value, expected)
            print('EQUAL   --> v =', value, " ==  x =", expected)
        except:
            expecteddots = ''
            for c in expected:
                expecteddots = expecteddots + ' ' + CODE_MORSE[c]
            print("Got = {} / len = {} , Expected = {} / len = {}".format(value, len(value), expected, len(expected)), ' -- > ', expecteddots)
            print('UNEQUAL!! --> v =', value, " !=  x =", expected)

    @classmethod
    def describe(cls, param):
        print(param)

###########
### TEST DATA

bit1 = '1' ; exp1 = 'E'
bit2 = '101' ; exp2 = 'I'
bit3 = '10001'; exp3 = 'EE'
bit4 = '10111' ; exp4 = 'A'
bit5 = '10111' ; exp5 = 'A'
bit6 = '1110111' ; exp6 = 'M'
bit7 = '111' ; exp7 = 'E'
bit8 = '1111111' ; exp8 = 'E'
bit9 = '111000111' ; exp9 = 'I'
bit10 = '111110000011111' ; exp10 = 'I'
bit11 = '111000000000111' ; exp11 = 'EE'
bit12 = '01110'; exp12 = 'E'

bit13 = '1100110011001100000011000000111111001100111111001111110000000000000011001111110011111100111111000000110011001111110000001111110011001100000011'
exp13 = 'HEY JUDE'

bit14 = '111111000000111111000000111111000000111111000000000000000000111111000000000000000000111111111111111111000000111111000000111111111111111111000000111111111111111111000000000000000000000000000000000000000000111111000000111111111111111111000000111111111111111111000000111111111111111111000000000000000000111111000000111111000000111111111111111111000000000000000000111111111111111111000000111111000000111111000000000000000000111111'
exp14 = 'HEY JUDE'

bit15 = '00011100010101010001000000011101110101110001010111000101000111010111010001110101110000000111010101000101110100011101110111000101110111000111010000000101011101000111011101110001110101011100000001011101110111000101011100011101110001011101110100010101000000011101110111000101010111000100010111010000000111000101010100010000000101110101000101110001110111010100011101011101110000000111010100011101110111000111011101000101110101110101110'
exp15 = 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.'

bit
exp16 = 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.'

# ############# TESTING
#
# inputlist = [bit1, bit2, bit3, bit4, bit5, bit6, bit7, bit8, bit9, bit10, bit11, bit12, bit13, bit14, bit15, bit16]
# expctlist = [exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, exp9, exp10, exp11, exp12, exp13, exp14, exp15, exp16]
#
# for i in range(len(inputlist)):
#     print(i+1, ') ', end='')
#     Test.assert_equals(decode_morse(decode_bits(inputlist[i])), expctlist[i])

bit17 = '0000000011011010011100000110000001111110100111110011111100000000000111011111111011111011111000000101100011111100000111110011101100000100000'
exp17 = 'HEY JUDE'

bit18 = '0'
exp18 = ''

bit19 = '000000000000000000000000000000000000000000'
exp19 = ''

bit20 = '1001'; exp20 = 'EE'
bit21 = '100001'; exp21 = 'EE'
bit22 = '10000001'; exp22 = 'E E'
bit23 = '10000000001'; exp23 = 'E E'

bit
exp24 = 'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG'

# input1 = bit24
# expect1 = exp24
# # input1 = bit13
# # expect1 = exp13
# print(input1)
# print('dots = ', decode_bits(input1))
# Test.assert_equals(decode_morse(decode_bits(input1)), expect1)
# print('expect = ', expect1)
# print('exp dots = ', encode_morse(expect1))

inputlist = [bit1, bit2, bit3, bit4, bit5, bit6, bit7, bit8, bit9, bit10, bit11, bit12, bit13, bit14, bit15, bit16, bit17, bit18, bit19, bit20, bit21, bit22, bit23, bit24]
expctlist = [exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, exp9, exp10, exp11, exp12, exp13, exp14, exp15, exp16, exp17, exp18, exp19, exp20, exp21, exp22, exp23, exp24]

for i in range(len(inputlist)):
    print(i+1, ') ', end='')
    Test.assert_equals(decode_morse(decode_bits(inputlist[i])), expctlist[i])
